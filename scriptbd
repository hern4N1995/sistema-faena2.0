--Crear base de datos
CREATE DATABASE sistema_faenasDB;

--Crear tablas de faena


CREATE TABLE IF NOT EXISTS provincia(
    id_provincia SERIAL PRIMARY KEY,
    descripcion VARCHAR(20) NOT NULL
);

CREATE TABLE IF NOT EXISTS enfermedad(
    id_enfermedad SERIAL PRIMARY KEY,
    descripcion VARCHAR(20) NOT NULL
);

CREATE TABLE IF NOT EXISTS categoria_especie(
    id_cat_especie SERIAL PRIMARY KEY,
    descripcion VARCHAR(25) NOT NULL
);


CREATE TABLE IF NOT EXISTS productor(
	id_productor SERIAL PRIMARY KEY,
	cuit VARCHAR(30),
	nombre VARCHAR(50)
);

CREATE TABLE IF NOT EXISTS planta(
    id_planta SERIAL PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL,
    fecha_habilitacion DATE,
    norma_legal varchar(20),
    estado BOOLEAN DEFAULT TRUE
)

CREATE TABLE IF NOT EXISTS departamento(
	id_departamento SERIAL PRIMARY KEY,
	id_provincia INTEGER NOT NULL,
	nombre_departamento VARCHAR(50),

	CONSTRAINT FK_id_provincia FOREIGN KEY (id_provincia) REFERENCES provincia(id_provincia)
);

CREATE TABLE IF NOT EXISTS especie(
    id_especie SERIAL PRIMARY KEY,
    id_cat_especie SMALLINT NOT NULL,
    descripcion VARCHAR(20) NOT NULL,

    CONSTRAINT FK_id_categoria_especie FOREIGN KEY (id_cat_especie) REFERENCES categoria_especie(id_cat_especie)
);



CREATE TABLE IF NOT EXISTS titular_faena(
	id_titular_faena SERIAL PRIMARY KEY, 
	nombre VARCHAR(30) NOT NULL,
	id_localidad SMALLINT NOT NULL,
	CONSTRAINT FK_id_localidad FOREIGN KEY (id_localidad) REFERENCES localidad(id_localidad)
);



CREATE TABLE IF NOT EXISTS tropa (
    id_tropa SERIAL PRIMARY KEY,
    dte_dtu VARCHAR(30) NOT NULL,
    guia_policial VARCHAR(30) NOT NULL,
    fecha TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    id_titular_faena INTEGER,
    n_tropa INTEGER NOT NULL,
    id_departamento INTEGER NOT NULL,
    id_productor INTEGER,
    id_planta INTEGER NOT NULL,

    -- Foreign Keys
    CONSTRAINT fk_id_titular_faena FOREIGN KEY (id_titular_faena) REFERENCES titular_faena(id_titular_faena),
    CONSTRAINT fk_id_departamento FOREIGN KEY (id_departamento) REFERENCES departamento(id_departamento),
    CONSTRAINT fk_id_productor FOREIGN KEY (id_productor) REFERENCES productor(id_productor),
    CONSTRAINT fk_id_planta FOREIGN KEY (id_planta) REFERENCES planta(id_planta)
);


CREATE TABLE IF NOT EXISTS tropa_detalle(
    id_tropa_detalle SERIAL INTEGER PRIMARY KEY,
    id_cat_especie INTEGER NOT NULL,
    id_tropa INTEGER NOT NULL,
    id_especie SMALLINT NOT NULL,
    cantidad SMALLINT NOT NULL,


    CONSTRAINT FK_id_tropa FOREIGN KEY (id_tropa) REFERENCES tropa(id_tropa),
    CONSTRAINT FK_id_especie FOREIGN KEY (id_especie) REFERENCES especie(id_especie)
);

CREATE TABLE IF NOT EXISTS faena(
    id_faena SERIAL INTEGER PRIMARY KEY,
    id_tropa INTEGER NOT NULL,
    fecha_faena DATE NOT NULL,
    cantidad_faena SMALLINT NOT NULL,

    CONSTRAINT FK_id_tropa FOREIGN KEY (id_tropa) REFERENCES tropa (id_tropa)
);


CREATE TABLE IF NOT EXISTS decomiso(
    id_decomiso SERIAL INTEGER PRIMARY KEY,
    id_faena INTEGER NOT NULL,
    id_enfermedad INTEGER NOT NULL,
    cantidad_afectados SMALLINT,

    CONSTRAINT FK_id_faena FOREIGN KEY (id_faena) REFERENCES faena(id_faena),
    CONSTRAINT FK_id_enfermedad FOREIGN KEY (id_enfermedad) REFERENCES enfermedad(id_enfermedad)
);

CREATE TABLE IF NOT EXISTS remanente_tropa (
    id_remanente SERIAL PRIMARY KEY,
    id_tropa INTEGER NOT NULL,
    /*dte_dtu seria lo mejor para un remanente no?*/
    cantidad_remanente SMALLINT NOT NULL, -- animales no faenados
    motivo VARCHAR(100), -- opcional, ej: "No aptos", "Destino distinto", "Faena parcial"
    fecha_registro DATE DEFAULT CURRENT_DATE,

    CONSTRAINT FK_id_tropa FOREIGN KEY (id_tropa) REFERENCES tropa(id_tropa)
);
/*Esta tabla permite registrar por tropa cuántos animales quedaron sin faenar, por qué motivo y cuándo.
*/


CREATE TABLE IF NOT EXISTS rol_usuario(
    id_rol SERIAL PRIMARY KEY,
    descripcion VARCHAR(20) NOT NULL
)

CREATE TABLE IF NOT EXISTS usuario (
    id_usuario SERIAL PRIMARY KEY,
    dni INTEGER NOT NULL,
    nombre VARCHAR(50) NOT NULL,
    apellido VARCHAR(50) NOT NULL,
    contrasenia VARCHAR(255) NOT NULL,        -- encriptado (bcrypt)
    email VARCHAR(100) NOT NULL UNIQUE,    -- único para login
    estado BOOLEAN DEFAULT TRUE,           -- TRUE = activo / FALSE = inactivo
    fecha_creacion TIMESTAMPTZ DEFAULT NOW(),
    id_rol INTEGER NOT NULL,
    id_planta INTEGER,
    n_telefono VARCHAR(20),

    CONSTRAINT fk_id_rol FOREIGN KEY (id_rol) REFERENCES rol_usuario(id_rol),
    CONSTRAINT fk_id_planta FOREIGN KEY (id_planta) REFERENCES planta(id_planta)
);





-------CONSULTAS---------

--CARGAR DATOS a la tablaX
--INSERT INTO provincia (descripcion) VALUES ('Capital');
INSERT INTO provincia (descripcion) VALUES ('Corrientes');


--ELIMINAR DATOS a la tablaX
--DELETE FROM provincia WHERE (descripcion) = 'Capital';

